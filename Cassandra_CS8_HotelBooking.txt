
1. Create a table available_rooms_by_hotel_date as per the above requirement with hotel_id
as the partition key, while date and room_number are clustering columns.
	CREATE TABLE available_rooms_by_hotel_date (
	    hotel_id text,
	    date text, 
	    room_number smallint,
	    is_available boolean,
	    PRIMARY KEY ((hotel_id), room_number, date)
	);

2. Bulk load to table available_rooms_by_hotel_data FROM available_rooms.csv
   Hint: Use copy command in cqlsh
	COPY available_rooms_by_hotel_date (hotel_id, date, room_number, is_available) FROM '/home/edureka/available_rooms.csv' WITH DELIMITER=',' AND HEADER=TRUE;

3. Display all the records in available_rooms_by_hotel_date for a particular hotel_id (ex: AZ123) and room_number (ex: 101). Remember both hotel_id  and room_number are part of composite primary key.
	select * from available_rooms_by_hotel_date where hotel_id = 'AZ123' and room_number = 101;

4. Display all records for a particular hotel between two specific date range in descending order of date.
	select * from available_rooms_by_hotel_date where hotel_id = 'AZ123' and room_number = 101 and date > '2016-01-01' and date < '2016-01-08';

5. Write an UDF is available which return 1 if a room is available else return 0 Make a call to the UDF to display the results for table available_rooms_by_hotel_date.

CREATE FUNCTION IF NOT EXISTS is_available (input boolean) CALLED ON NULL INPUT RETURNS int 
LANGUAGE java AS ' return input == true ? 1 : 0; ';

	select hotel_id, date, room_number, is_available(is_available) from available_rooms_by_hotel_date;

